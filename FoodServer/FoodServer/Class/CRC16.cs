using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FoodServer.Class
{
    /// <summary>
    /// 消息CRC16-CCITT校验算法
    /// </summary>
    /// 
    /* ----------------------------------------------------------
文件名称：CRC16.cs

作者：秦建辉

MSN：splashcn@msn.com
QQ：36748897

博客：http://blog.csdn.net/jhqin

开发环境：
    Visual Studio V2010
    .NET Framework 4 Client Profile

版本历史：    
    V1.0	2011年11月15日
			循环冗余校验：CRC-16-CCITT
------------------------------------------------------------ */
  
        /// <summary>
        /// 循环冗余检验：CRC-16-CCITT查表法
        /// </summary>
        public static partial class CRCITU
        {
            /// <summary>
            /// 计算给定长度数据的16位CRC
            /// </summary>
            /// <param name="data">要计算CRC的字节数组</param>
            /// <returns>CRC值</returns>
            public static UInt16 GetCrc16(Byte[] data)
            {   // 初始化
                Int32 High = 0xFF;  // 高字节
                Int32 Low = 0xFF;   // 低字节
                if (data != null)
                {
                    foreach (Byte b in data)
                    {
                        Int32 Index = Low ^ b;
                        Low = High ^ CRC16TABLE_LO[Index];
                        High = CRC16TABLE_HI[Index];
                    }
                }

                return (UInt16)(~((High << 8) + Low));    // 取反
            }

            /// <summary>
            /// 检查给定长度数据的16位CRC是否正确
            /// </summary>
            /// <param name="data">要校验的字节数组</param>
            /// <returns>
            ///     true：正确
            ///     false：错误
            /// </returns>
            /// <reamrks>
            /// 字节数组最后2个字节为校验码，且低字节在前面，高字节在后面
            /// </reamrks>
            public static Boolean IsCrc16Good(Byte[] data)
            {
                // 初始化
                Int32 High = 0xFF;
                Int32 Low = 0xFF;
                if (data != null)
                {
                    foreach (Byte b in data)
                    {
                        Int32 Index = Low ^ b;
                        Low = High ^ CRC16TABLE_LO[Index];
                        High = CRC16TABLE_HI[Index];
                    }
                }

                return (High == 0xF0 && Low == 0xB8);
            }

            /// <summary>
            /// CRC16查找表高字节
            /// </summary>
            private static readonly Byte[] CRC16TABLE_HI =
        {
	        0x00, 0x11, 0x23, 0x32, 0x46, 0x57, 0x65, 0x74, 0x8C, 0x9D, 0xAF, 0xBE, 0xCA, 0xDB, 0xE9, 0xF8,
	        0x10, 0x01, 0x33, 0x22, 0x56, 0x47, 0x75, 0x64, 0x9C, 0x8D, 0xBF, 0xAE, 0xDA, 0xCB, 0xF9, 0xE8,
	        0x21, 0x30, 0x02, 0x13, 0x67, 0x76, 0x44, 0x55, 0xAD, 0xBC, 0x8E, 0x9F, 0xEB, 0xFA, 0xC8, 0xD9,
	        0x31, 0x20, 0x12, 0x03, 0x77, 0x66, 0x54, 0x45, 0xBD, 0xAC, 0x9E, 0x8F, 0xFB, 0xEA, 0xD8, 0xC9,
	        0x42, 0x53, 0x61, 0x70, 0x04, 0x15, 0x27, 0x36, 0xCE, 0xDF, 0xED, 0xFC, 0x88, 0x99, 0xAB, 0xBA,
	        0x52, 0x43, 0x71, 0x60, 0x14, 0x05, 0x37, 0x26, 0xDE, 0xCF, 0xFD, 0xEC, 0x98, 0x89, 0xBB, 0xAA,
	        0x63, 0x72, 0x40, 0x51, 0x25, 0x34, 0x06, 0x17, 0xEF, 0xFE, 0xCC, 0xDD, 0xA9, 0xB8, 0x8A, 0x9B,
	        0x73, 0x62, 0x50, 0x41, 0x35, 0x24, 0x16, 0x07, 0xFF, 0xEE, 0xDC, 0xCD, 0xB9, 0xA8, 0x9A, 0x8B,
	        0x84, 0x95, 0xA7, 0xB6, 0xC2, 0xD3, 0xE1, 0xF0, 0x08, 0x19, 0x2B, 0x3A, 0x4E, 0x5F, 0x6D, 0x7C,
	        0x94, 0x85, 0xB7, 0xA6, 0xD2, 0xC3, 0xF1, 0xE0, 0x18, 0x09, 0x3B, 0x2A, 0x5E, 0x4F, 0x7D, 0x6C,
	        0xA5, 0xB4, 0x86, 0x97, 0xE3, 0xF2, 0xC0, 0xD1, 0x29, 0x38, 0x0A, 0x1B, 0x6F, 0x7E, 0x4C, 0x5D,
	        0xB5, 0xA4, 0x96, 0x87, 0xF3, 0xE2, 0xD0, 0xC1, 0x39, 0x28, 0x1A, 0x0B, 0x7F, 0x6E, 0x5C, 0x4D,
	        0xC6, 0xD7, 0xE5, 0xF4, 0x80, 0x91, 0xA3, 0xB2, 0x4A, 0x5B, 0x69, 0x78, 0x0C, 0x1D, 0x2F, 0x3E,
	        0xD6, 0xC7, 0xF5, 0xE4, 0x90, 0x81, 0xB3, 0xA2, 0x5A, 0x4B, 0x79, 0x68, 0x1C, 0x0D, 0x3F, 0x2E,
	        0xE7, 0xF6, 0xC4, 0xD5, 0xA1, 0xB0, 0x82, 0x93, 0x6B, 0x7A, 0x48, 0x59, 0x2D, 0x3C, 0x0E, 0x1F,
	        0xF7, 0xE6, 0xD4, 0xC5, 0xB1, 0xA0, 0x92, 0x83, 0x7B, 0x6A, 0x58, 0x49, 0x3D, 0x2C, 0x1E, 0x0F
        };

            /// <summary>
            /// CRC16查找表低字节
            /// </summary>
            private static readonly Byte[] CRC16TABLE_LO = 
        {
	        0x00, 0x89, 0x12, 0x9B, 0x24, 0xAD, 0x36, 0xBF, 0x48, 0xC1, 0x5A, 0xD3, 0x6C, 0xE5, 0x7E, 0xF7,
	        0x81, 0x08, 0x93, 0x1A, 0xA5, 0x2C, 0xB7, 0x3E, 0xC9, 0x40, 0xDB, 0x52, 0xED, 0x64, 0xFF, 0x76,
	        0x02, 0x8B, 0x10, 0x99, 0x26, 0xAF, 0x34, 0xBD, 0x4A, 0xC3, 0x58, 0xD1, 0x6E, 0xE7, 0x7C, 0xF5,
	        0x83, 0x0A, 0x91, 0x18, 0xA7, 0x2E, 0xB5, 0x3C, 0xCB, 0x42, 0xD9, 0x50, 0xEF, 0x66, 0xFD, 0x74,
	        0x04, 0x8D, 0x16, 0x9F, 0x20, 0xA9, 0x32, 0xBB, 0x4C, 0xC5, 0x5E, 0xD7, 0x68, 0xE1, 0x7A, 0xF3,
	        0x85, 0x0C, 0x97, 0x1E, 0xA1, 0x28, 0xB3, 0x3A, 0xCD, 0x44, 0xDF, 0x56, 0xE9, 0x60, 0xFB, 0x72,
	        0x06, 0x8F, 0x14, 0x9D, 0x22, 0xAB, 0x30, 0xB9, 0x4E, 0xC7, 0x5C, 0xD5, 0x6A, 0xE3, 0x78, 0xF1,
	        0x87, 0x0E, 0x95, 0x1C, 0xA3, 0x2A, 0xB1, 0x38, 0xCF, 0x46, 0xDD, 0x54, 0xEB, 0x62, 0xF9, 0x70,
	        0x08, 0x81, 0x1A, 0x93, 0x2C, 0xA5, 0x3E, 0xB7, 0x40, 0xC9, 0x52, 0xDB, 0x64, 0xED, 0x76, 0xFF,
	        0x89, 0x00, 0x9B, 0x12, 0xAD, 0x24, 0xBF, 0x36, 0xC1, 0x48, 0xD3, 0x5A, 0xE5, 0x6C, 0xF7, 0x7E,
	        0x0A, 0x83, 0x18, 0x91, 0x2E, 0xA7, 0x3C, 0xB5, 0x42, 0xCB, 0x50, 0xD9, 0x66, 0xEF, 0x74, 0xFD,
	        0x8B, 0x02, 0x99, 0x10, 0xAF, 0x26, 0xBD, 0x34, 0xC3, 0x4A, 0xD1, 0x58, 0xE7, 0x6E, 0xF5, 0x7C,
	        0x0C, 0x85, 0x1E, 0x97, 0x28, 0xA1, 0x3A, 0xB3, 0x44, 0xCD, 0x56, 0xDF, 0x60, 0xE9, 0x72, 0xFB,
	        0x8D, 0x04, 0x9F, 0x16, 0xA9, 0x20, 0xBB, 0x32, 0xC5, 0x4C, 0xD7, 0x5E, 0xE1, 0x68, 0xF3, 0x7A,
	        0x0E, 0x87, 0x1C, 0x95, 0x2A, 0xA3, 0x38, 0xB1, 0x46, 0xCF, 0x54, 0xDD, 0x62, 0xEB, 0x70, 0xF9,
	        0x8F, 0x06, 0x9D, 0x14, 0xAB, 0x22, 0xB9, 0x30, 0xC7, 0x4E, 0xD5, 0x5C, 0xE3, 0x6A, 0xF1, 0x78
        };
        }
 

    public class CRC16
    {


        /****下表是常用ccitt 16,生成式1021反转成8408后的查询表格****/
        UInt16[] crc16_ccitt_table =
            {
            0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
            0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
            0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
            0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
            0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
            0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
            0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
            0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
            0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
            0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
            0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
            0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
            0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
            0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
            0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
            0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
            0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
            0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
            0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
            0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
            0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
            0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
            0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
            0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
            0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
            0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
            0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
            0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
            0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
            0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
            0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
            0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78

            };
        public CRC16()
        {

        }
//         public  UInt16 getCrc16(byte[] array, int len)
//         {
//             UInt16[] crc16_table = 
//             {
//                 0x0000, 0xCC01, 0xD801, 0x1400, 
//                 0xF001, 0x3C00, 0x2800, 0xE401,
//                 0xA001, 0x6C00, 0x7800, 0xB401,
//                 0x5000, 0x9C01, 0x8801, 0x4400
//             };
// 
//             UInt16 reg = 0x00;
//             int r1;
//             int idx = 0;
//             while (idx < len)
//             {
//                 r1 = crc16_table[reg & 0x0F];
//                 reg = (UInt16)((reg >> 4) & 0x0FFF);
//                 reg = (UInt16)(reg ^ r1 ^ crc16_table[array[idx] & 0x0F]);
// 
//                 r1 = crc16_table[reg & 0x0F];
//                 reg = (UInt16)((reg >> 4) & 0x0FFF);
//                 reg = (UInt16)(reg ^ r1 ^ crc16_table[(array[idx] >> 4) & 0x0F]);
// 
//                 ++idx;
//             }
//             return reg;
//         }

        //CRC16校验
        public int GetCRC16(byte[] data, UInt32 datLen)
        {

          //  UINT8* pTmp = prDat;
            UInt16 ch_crc = 0xffff;
           // UInt32 len = datLen; //计算包含CRC字节在之前的
            UInt16 i = 1;
            while (datLen > i)
            {
              
                ch_crc = (UInt16)((ch_crc >> 8) ^ crc16_ccitt_table[(ch_crc ^ data[i++]) & 0xff]);

            }

            if (0xf0b8 != ch_crc)
            {
               // printf(" Check code error: %x != %x\n", ch_crc, GOOD_CRC);
                return -1;
            }

            return 0;
        }
        //计算CRC16
        public UInt16 count_crc16(byte[] prDat, UInt32 datLen)
        {
            
            UInt16 crc_reg = 0xffff;
            int i = 1;
            while (datLen > i)
            {
                crc_reg =(UInt16)((crc_reg >> 8) ^ crc16_ccitt_table[(crc_reg ^ prDat[i++]) & 0xff]);

            }

            crc_reg ^= 0xffff; //取反

            return crc_reg;

        }
        public UInt16 GetKey(byte[] data)
        {
            int count = data.Length;
            byte[] buf = new byte[data.Length + 2];
            data.CopyTo(buf, 0);
            int ptr = 0;
            int i = 0;
            UInt16 crc = 0;
            byte crc1, crc2, crc3;
            crc1 = buf[ptr++];
            crc2 = buf[ptr++];
            buf[count] = 0;
            buf[count + 1] = 0;
            while (--count >= 0)
            {
                crc3 = buf[ptr++];
                for (i = 0; i < 8; i++)
                {
                    if (((crc1 & 0x80) >> 7) == 1)//判断crc1高位是否为1 
                    {
                        crc1 = (byte)(crc1 << 1); //移出高位 
                        if (((crc2 & 0x80) >> 7) == 1)//判断crc2高位是否为1 
                        {
                            crc1 = (byte)(crc1 | 0x01);//crc1低位由0变1 
                        }
                        crc2 = (byte)(crc2 << 1);//crc2移出高位 
                        if (((crc3 & 0x80) >> 7) == 1) //判断crc3高位是否为1 
                        {
                            crc2 = (byte)(crc2 | 0x01); //crc2低位由0变1 
                        }
                        crc3 = (byte)(crc3 << 1);//crc3移出高位 
                        crc1 = (byte)(crc1 ^ 0x10);
                        crc2 = (byte)(crc2 ^ 0x21);
                    }
                    else
                    {
                        crc1 = (byte)(crc1 << 1); //移出高位 
                        if (((crc2 & 0x80) >> 7) == 1)//判断crc2高位是否为1 
                        {
                            crc1 = (byte)(crc1 | 0x01);//crc1低位由0变1 
                        }
                        crc2 = (byte)(crc2 << 1);//crc2移出高位 
                        if (((crc3 & 0x80) >> 7) == 1) //判断crc3高位是否为1 
                        {
                            crc2 = (byte)(crc2 | 0x01); //crc2低位由0变1 
                        }
                        crc3 = (byte)(crc3 << 1);//crc3移出高位 
                    }
                }
            }
            crc = (UInt16)((crc1 << 8) + crc2);
            return crc;

        }
    }
}
